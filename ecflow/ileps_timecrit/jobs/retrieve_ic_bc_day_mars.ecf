%include <sched_prolog.h>
%include <sched_serial_mem.h>
%include <script_prolog.h>

# retrieve initial surface/soil fields, mostly on target grid,
# retrieve also soil moisture and soil type on global reduced Gaussian
# for further computation of smi
retrieve_surf_ana_mars() {

cat >req_${refdate}${reftime}_ana1 << FINIFINI
RETRIEVE,
LEVTYPE=SFC,
LEVELIST=OFF,
REPRES=GG,
DATE=$refdate,
TIME=$reftime,
PARAM=SRC/TSN/SKT/STL1/STL2/STL3/STL4/SD/RSN/ASN/CI,
$geoinfo,
EXPVER=$expid,
$marsinfo,
TARGET="data/ec_${refdate}${reftime}_surf.0"

RETRIEVE,
LEVTYPE=ML,
LEVELIST=1,
REPRES=SH,
PARAM=Z,
$marsinfo_const

RETRIEVE,
LEVTYPE=SFC,
LEVELIST=OFF,
REPRES=GG,
PARAM=SST,
$marsinfo,
INTERPOLATION=NEAREST LSM

FINIFINI

cat >req_${refdate}${reftime}_ana2 << FINIFINI
RETRIEVE,
LEVTYPE=SFC,
LEVELIST=OFF,
REPRES=GG,
DATE=$refdate,
TIME=$reftime,
#PARAM=Z/LSM/SR/CVL/CVH/SDOR/ISOR/ANOR/SLOR/SLT,
PARAM=Z/LSM/SR/SLT,
$geoinfo,
EXPVER=$expid,
$marsinfo_const,
TARGET="data/ec_${refdate}${reftime}_const.0"

FINIFINI

cat >req_${refdate}${reftime}_ana3 << FINIFINI
RETRIEVE,
LEVTYPE=SFC,
GRID=AV,
AREA=OFF,
LEVELIST=OFF,
DATE=$refdate,
TIME=$reftime,
PARAM=SWVL1/SWVL2/SWVL3/SWVL4,
$marsinfo,
TARGET="data/ec_${refdate}${reftime}_ggswv.0"

RETRIEVE,
DATE=$refdate,
TIME=$reftime,
PARAM=SLT,
$marsinfo_const,
TARGET="data/ec_${refdate}${reftime}_ggslt.0"

FINIFINI
mars req_${refdate}${reftime}_ana1
mars req_${refdate}${reftime}_ana2
mars req_${refdate}${reftime}_ana3
rm -f req_${refdate}${reftime}_ana?
}


# retrieve all fields on upper air model levels (including lnsp at a single model level)
retrieve_ml_mars() {

cat >req_ml_$RETRIEVE_STOP << FINIFINI
RETRIEVE,
LEVTYPE=ML,
LEVELIST=31/TO/$NLEV,
REPRES=SH,
DATE=$refdate,
TIME=$reftime,
PARAM=T/U/V/W/Q/CLWC/CIWC/CRWC/CSWC,
$geoinfo,
EXPVER=$expid,
$marsinfo,
TARGET="data/ec_${refdate}${reftime}_ml.[step]"

RETRIEVE,
PARAM=LNSP,
LEVELIST=1
FINIFINI

mars req_ml_$RETRIEVE_STOP
rm -f req_ml_$RETRIEVE_STOP
}


compute_smi () {
# arguments: <ggswv file> <ggslt file> <output file>

smi_equation="(swvl-0.059)/(0.242-0.059)*(slt=1)+(swvl-0.151)/(0.346-0.151)*(slt=2)+(swvl-0.133)/(0.382-0.133)*(slt=3)+(swvl-0.279)/(0.448-0.279)*(slt=4)+(swvl-0.335)/(0.541-0.335)*(slt=5)+(swvl-0.267)/(0.662-0.267)*(slt=6)+(swvl-0.151)/(0.346-0.151)*(slt=7)"

tmpgrib=tmpgrib_$RETRIEVE_STOP
# retrieve slt
cat >req_smicomp_$RETRIEVE_STOP << FINIFINI
read,   source   = "$2",
        param    = slt, fieldset = slt
FINIFINI
# retrieve swvl and compute smi for each soil level
for lv in $(seq 4); do
  cat >>req_smicomp_$RETRIEVE_STOP << FINIFINI
read,   source   = "$1",
        param    = swvl$lv, fieldset = swvl
        compute, fieldset = smi$lv,
        formula  = "$smi_equation"
        write, fieldset = smi$lv, target = "$tmpgrib"
FINIFINI
done
# convert from archived (reduced) to regular grid for each soil level
for lv in $(seq 4); do
  cat >>req_smicomp_$RETRIEVE_STOP << FINIFINI
read,  param = swvl$lv, fieldset = smi$lv, source = "$tmpgrib", $geoinfo0
        write, fieldset = smi$lv, target = "$3"
FINIFINI
done

mars req_smicomp_$RETRIEVE_STOP
rm -f $tmpgrib

}

module load ecmwf-toolbox
safe_rm_rf $RETRIEVE_IC_BC_DIR
mkdir -p $RETRIEVE_IC_BC_DIR
mkdir -p $RETRIEVE_IC_BC_DIR/data
cd $RETRIEVE_IC_BC_DIR

# target file names composed with leading zeroes
export MARS_MULTITARGET_STRICT_FORMAT=1

if [ "$ENS_MEMB" = 0 ] ; then # deterministic
    refdate=$DATE
    reftime=$TIME
    lag=0
    marsinfo="CLASS=OD,STREAM=oper,TYPE=fc,PADDING=0"
    marsinfo_const="CLASS=OD,STREAM=oper,TYPE=an,PADDING=0"
    geoinfo0="AREA=$DET_AREA,GRID=$DET_GRID"
    NLEV=$DET_NLEV
    expid=$DET_EXPID
    hincbd=$DET_HINCBD
else # leps member
    # get cluster analysis information (to be reviewed)
    # at the moment refdate, reftime, lag, elem
    . $CLUST_ANA_DIR/data/clust_ana_result_$DATE$TIME.$ENS_MEMB.sh
    if [ "$elem" = 0 ]; then
        marsinfo="CLASS=OD,STREAM=enfo,TYPE=cf,PADDING=0"
        marsinfo_const=$marsinfo
    else
        marsinfo="CLASS=OD,STREAM=enfo,TYPE=pf,NUMBER=$elem,PADDING=0"
        marsinfo_const="CLASS=OD,STREAM=enfo,TYPE=cf,PADDING=0"
    fi
    geoinfo0="AREA=$EPS_AREA,GRID=$EPS_GRID"
    NLEV=$EPS_NLEV
    expid=$EPS_EXPID
    hincbd=$EPS_HINCBD
fi

if [ "$RETRIEVE_STOP" = 0 ]; then # only analysis requested
    if [ "$lag" = 0 ]; then
        :
    else
	marsinfo="$marsinfo,STEP=$lag"
    fi
    geoinfo="${geoinfo0},TRUNCATION=NONE"
    retrieve_surf_ana_mars
    retrieve_ml_mars
    compute_smi data/ec_${refdate}${reftime}_ggswv.0 data/ec_${refdate}${reftime}_ggslt.0 data/ec_${refdate}${reftime}_smi.0
    # touch data/ec_${refdate}${reftime}_smi.0 # temporary to avoid failure
    # add grib_set -s editionNumber=2,scanningMode=0
    if [ "$lag" = 0 ]; then
        grib_set -s editionNumber=2,scanningMode=0 \
            data/ec_${refdate}${reftime}_const.0 data/ec_${refdate}${reftime}_surf.0 \
            data/ec_${refdate}${reftime}_smi.0 data/ec_${refdate}${reftime}_ml.0 \
            $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib
    else
        grib_set -s editionNumber=2,scanningMode=0,dataDate=$DATE,dataTime=$TIME,stepRange=0 \
            data/ec_${refdate}${reftime}_const.0 data/ec_${refdate}${reftime}_surf.0 \
            data/ec_${refdate}${reftime}_smi.0 data/ec_${refdate}${reftime}_ml.$lag \
            $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib
    fi
    #   rm -f data/ec_${refdate}${reftime}_*.0 # needed?

else # multiple forecasts without analysis requested
    marsinfo="$marsinfo,STEP=$(($RETRIEVE_START+$hincbd+$lag))/to/$(($RETRIEVE_STOP+$lag))/by/$hincbd"
    geoinfo="${geoinfo0},TRUNCATION=AUTO"
    retrieve_ml_mars
    for ofile in data/ec_${refdate}${reftime}_ml.*; do
        step=${ofile##*.}
        if [ "$lag" = 0 ]; then
            mv $ofile $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $step).grib
        else
            clepstep=$(($step-$lag))
            grib_set -s dataDate=$DATE,dataTime=$TIME,stepRange=$clepstep \
                 $ofile \
                 $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $clepstep).grib
        fi
#       rm -f $ofile # needed?
    done
fi

