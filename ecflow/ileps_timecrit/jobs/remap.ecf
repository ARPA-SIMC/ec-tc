%include <sched_prolog.h>
%include <sched_shmem.h>
%include <script_prolog.h>
%include <mod_icon.h>

safe_rm_rf $REMAP_DIR

mkdir -p $REMAP_DIR
mkdir -p $REMAP_DIR/data
cd $REMAP_DIR

# data in $RETRIEVE_IC_BC_DIR_COMMON/data/ec_202308300000+0132.grib
# ec_${DATE}${TIME}+$(printf "%%04d" $clepstep).grib
#datafile=...

# verify for OpenMP
export OMP_SCHEDULE="static"
export OMP_DYNAMIC="false"
export RLIMIT_CORE=0
export ATP_MAX_CORES=0
export ATP_ENABLED=1


if [ $TIME = "0000" ] ; then
  export MODEL_STOP=$MODEL_STOP_00
elif [ $TIME = "1200" ] ; then
  export MODEL_STOP=$MODEL_STOP_12
fi

if [ "$ENS_MEMB" = 0 ] ; then # deterministic
    hincbd=$DET_HINCBD
else
    hincbd=$EPS_HINCBD
fi

# file names
export IN_GRID=$RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib

# initial condition
export IN_FILE=$RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib
export OUT_FILE=$REMAP_DIR/data/ic_${DATE}${TIME}.nc
mkdir $REMAP_DIR/dir.0
cd $REMAP_DIR/dir.0
conf_template iconremap_IC.nml
mv iconremap_IC.nml iconremap.nml
cd ..

# boundary conditions
c=1
for trange in `seq 0 $hincbd $MODEL_STOP`; do
    dd=`printf "%%02d" $((trange/24))`
    hh=`printf "%%02d" $((trange%%24))`
    if [ "$trange" = "0" ]; then
        export IN_FILE=$RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $trange).grib
    else
# at steps >0 copy hybrid level surface orography to lbc, it would be
# more elegant to do it in retrieve phase but an additional task would
# be needed because we need IC and BC simultaneously
        export IN_FILE=$RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $trange).z.grib
        grib_set -s stepRange=$trange -w shortName=FI -S $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib $IN_FILE
        cat $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $trange).grib >> $IN_FILE
    fi
    export OUT_FILE=$REMAP_DIR/data/lbc_${DATE}${TIME}_${dd}${hh}0000.nc
    mkdir $REMAP_DIR/dir.$c
    cd $REMAP_DIR/dir.$c
    conf_template iconremap_BC.nml
    mv iconremap_BC.nml iconremap.nml
    cd ..
    c=$(($c+1))
done

# at this point $c should be equal n. of BC + 1, launch $c processes
# with srun, each in its own directory
# in theory:
# OMP_NUM_THREADS=1
# --ntasks=2 --cpus-per-task=1
# should use 2 MPI processes and 1 OpenMP thread
# while
# OMP_NUM_THREADS=2
# --ntasks=1 --cpus-per-task=2
# should use 1 MPI process and 2 OpenMP threads
# it is not obvious which one is better
export OMP_NUM_THREADS=1
for n in `seq 0 $(($c - 1))`; do
    cd $REMAP_DIR/dir.$n
    srun --exclusive --mem=32G --ntasks=2 --cpus-per-task=1 -N 1 $BIN_DIR/iconremap -vvv --remap_nml=iconremap.nml > iconremap.log 2>&1
done

cd $REMAP_DIR
wait

%include <tail.h>
