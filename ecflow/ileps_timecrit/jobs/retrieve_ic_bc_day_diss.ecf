%include <sched_prolog.h>
%include <sched_serial_mem.h>
%include <script_prolog.h>

retrieve_ana_diss() {
#-------------------------------------------------------------------------------
# Retrieve from $EC_DISS fields for initial conditions of one LEPS member.
# Data can be either analysis or 12h forecasts
# Special processing from gaussian grid for SST and SWV
#
# Use enviromnent varibles set by main program:
# $refdate    (reftime of IFS run to be retrieved)
# $reftime
# $lag        (forecast step of data to be retrieved)
# $ENS_MEMBER (ens. member, relative to LEPS numeration)
# $elem       (ens. member, relative to IFS numeration)
# $disspref   (prefix for input files: ITD or ITX)
# $geoinfo    (chiavi MARS relative al dominio dei dati IFS: AREA+GRID)
#
# Input: files ITD or ITX, in $EC_DISS
#
# Output: groups of grib files, on regular grid, in $RETRIEVE_IC_BC_DIR =
#   $TCWORK/work/ileps_tc_2.5km/retrieve_ic_bc.$ENS_MEMB.$RETRIEVE_STOP

# Input files
rt="$refdate $reftime"
vt=$(date -d "${rt} +${lag}hours" +"%%Y%%m%%d %%H")
file_rt=$(date -d "$rt" +"%%m%%d%%H")
file_vt=$(date -d "$vt" +"%%m%%d%%H")

inputc="${EC_DISS}/${disspref}${file_rt}00${file_rt}001c" # constant fields
input="${EC_DISS}/${disspref}${file_rt}00${file_vt}001"   # all other fields

# Split input file
rm -f split.filt tmp.*.grb

echo "write \"tmp.[typeOfLevel].[shortName].[gridType].grb\";" > splitc.filt
if [ $ENS_MEMB = 0 ] ; then
  echo "write \"tmp.[typeOfLevel].[shortName].[gridType].grb\";" > split.filt
else
  cat << EOF > split.filt
  if ( perturbationNumber == ${elem} ) {
    write "tmp.[typeOfLevel].[shortName].[gridType].grb";
  }
EOF
fi

grib_filter splitc.filt $inputc
grib_filter split.filt $input

# Model levels + Z,lnsp on model layer 1
target="data/ec_${refdate}${reftime}_ml.${lag}"
rm -f $target
for var in t u v w q clwc ciwc crwc cswc z lnsp ; do
  cat tmp.hybrid.${var}.regular_ll.grb >> $target
done

# Surface fields
target="data/ec_${refdate}${reftime}_surf.${lag}"
for shortName in src tsn skt sd rsn asn ci ; do
  cat tmp.surface.${shortName}.regular_ll.grb >> $target
done
for shortName in stl1 stl2 stl3 stl4 ; do
  cat tmp.depthBelowLandLayer.${shortName}.regular_ll.grb >> $target
done

# Masked SST
rm -f maskSST.mars
cat << EOF > maskSST.mars
READ,
  SOURCE   = "tmp.surface.sst.reduced_gg.grb",
  FIELDSET = sst
READ,
  SOURCE   = "tmp.surface.lsm.reduced_gg.grb",
  FIELDSET = lsm
COMPUTE,
  FIELDSET = lsmbitmap,
  FORMULA  = "bitmap((lsm>=0.5),1)"
COMPUTE,
  FIELDSET = sst_mask,
  FORMULA  = "bitmap(sst,lsmbitmap)"
WRITE,
  FIELDSET = sst_mask,
  TARGET   = "sst_mask_gg.grb"
READ,
  SOURCE        = "sst_mask_gg.grb",
  $geoinfo,
  LEVTYPE       = SFC,
  INTERPOLATION = NEAREST LSM,
  TARGET        = "tmp.surface.sst.regular_ll.grb.masked"
EOF
mars maskSST.mars
cat tmp.surface.sst.regular_ll.grb.masked >> $target

# Soil water content
file_swv_gg=tmp.depthBelowLandLayer.swv.reduced_gg.grb
file_smi_ll=tmp.depthBelowLandLayer.smi.regular_ll.grb
rm -f $file_swv_gg $file_smi_ll 

for var in swvl1 swvl2 swvl3 swvl4 ; do
  cat tmp.depthBelowLandLayer.${var}.reduced_gg.grb >> $file_swv_gg
done

compute_smi $file_swv_gg tmp.surface.slt.reduced_gg.grb $file_smi_ll
cat $file_smi_ll >> $target

# Constant fields
target="data/ec_${refdate}${reftime}_const"
rm -f $target
for var in z lsm sr slt ; do
  cat tmp.surface.${var}.regular_ll.grb >> $target
done

}

retrieve_for_diss() {
#-------------------------------------------------------------------------------
# Retrieve from $EC_DISS fields for boundary conditions of one LEPS member.
#
# Use enviromnent varibles set by main program:
# $refdate    (reftime of IFS run to be retrieved)
# $reftime
# $range      (forecast time required)
# $lag        (forecast step of data to be retrieved)
# $ENS_MEMBER (ens. member, relative to LEPS numeration)
# $elem       (ens. member, relative to IFS numeration)
# $disspref   (prefix for input files: ITD or ITX)
# $geoinfo    (chiavi MARS relative al dominio dei dati IFS: AREA+GRID)
#
# Input: files ITD or ITX, in $EC_DISS
#
# Output: groups of grib files, on regular grid, in $RETRIEVE_IC_BC_DIR =
#   $TCWORK/work/ileps_tc_2.5km/retrieve_ic_bc.$ENS_MEMB.$RETRIEVE_STOP

# Input files
rt="$refdate $reftime"
vt=$(date -d "${rt} +${range}hours" +"%%Y%%m%%d %%H")
file_rt=$(date -d "$rt" +"%%m%%d%%H")
file_vt=$(date -d "$vt" +"%%m%%d%%H")

inputc="${EC_DISS}/${disspref}${file_rt}00${file_rt}001c" # constant fields
input="${EC_DISS}/${disspref}${file_rt}00${file_vt}001"   # all other fields

if [ $ENS_MEMB = 0 ] ; then
  gc_opt="typeOfLevel=hybrid,dataType=fc"
else
  if [ $elem = 0 ] ; then
    gc_opt="typeOfLevel=hybrid,dataType=cf"
  else
    gc_opt="typeOfLevel=hybrid,dataType=pf,perturbationNumber=$elem"
  fi
fi

# Model levels + Z on model layer 1
target="data/ec_${refdate}${reftime}_ml.${range}"
rm -f $target
grib_copy -w $gc_opt $input $target

# # Constant fields
# target="data/ec_${refdate}${reftime}_const"
# rm -f $target
# grib_copy -w shortName=z $inputc $target

}

#-------------------------------------------------------------------------------

compute_smi () {
# arguments: <ggswv file> <ggslt file> <output file>

smi_equation="(swvl-0.059)/(0.242-0.059)*(slt=1)+(swvl-0.151)/(0.346-0.151)*(slt=2)+(swvl-0.133)/(0.382-0.133)*(slt=3)+(swvl-0.279)/(0.448-0.279)*(slt=4)+(swvl-0.335)/(0.541-0.335)*(slt=5)+(swvl-0.267)/(0.662-0.267)*(slt=6)+(swvl-0.151)/(0.346-0.151)*(slt=7)"

tmpgrib=tmpgrib_$RETRIEVE_STOP
rm -f $tmpgrib
# retrieve slt
cat >req_smicomp_$RETRIEVE_STOP << FINIFINI
read,
  source   = "$2",
  param    = slt,
  fieldset = slt
FINIFINI

# retrieve swvl and compute smi for each soil level
for lv in $(seq 4); do
  cat >>req_smicomp_$RETRIEVE_STOP << FINIFINI
read,
  source   = "$1",
  param    = swvl$lv, fieldset = swvl
  compute, fieldset = smi$lv,
  formula  = "$smi_equation"
write, 
  fieldset = smi$lv,
  target = "$tmpgrib"
FINIFINI
done
# convert from archived (reduced) to regular grid for each soil level
for lv in $(seq 4); do
  cat >>req_smicomp_$RETRIEVE_STOP << FINIFINI
read,
  param = swvl$lv,
  fieldset = smi$lv,
  source = "$tmpgrib",
  $geoinfo
write, 
  fieldset = smi$lv,
  target = "$3"
FINIFINI
done

mars req_smicomp_$RETRIEVE_STOP

}

#-------------------------------------------------------------------------------
### Start of main program ###

module load ecmwf-toolbox
module load eclib

safe_rm_rf $RETRIEVE_IC_BC_DIR
mkdir -p $RETRIEVE_IC_BC_DIR
mkdir -p $RETRIEVE_IC_BC_DIR/data
cd $RETRIEVE_IC_BC_DIR

# from "cleaning_hpcf_part3.ecf":
#?? CLD analysis det 00/12 (useful?)
# ITD det 00/12
# ITS det 06/18
# ITX ens 00/06/12/18

# Assign control variables that are different for DET and ENS
if [ "$ENS_MEMB" = 0 ] ; then # deterministic
  refdate=$DATE
  reftime=$TIME
  lag=0
  geoinfo="AREA=$DET_AREA,GRID=$DET_GRID"
  hincbd=$DET_HINCBD
  if [ "$TIME" = "0000" -o "$TIME" = "1200" ]; then
      disspref=ITD
  else
      disspref=ITS
  fi

else  # leps member
# get cluster analysis information: at the moment refdate, reftime, lag, elem
  . $CLUST_ANA_DIR/data/clust_ana_result_$DATE$TIME.$ENS_MEMB.sh

  geoinfo="AREA=$EPS_AREA,GRID=$EPS_GRID"
  hincbd=$EPS_HINCBD
  disspref=ITX
fi

# Retrieve IFS data from dissemination files and convert to grib2.
# If needed, subtract $lag hours from verification time (eg. forecast at +$lag hours
#   are written as analyisis at verification time)

if [ "$RETRIEVE_STOP" = 0 ]; then # only analysis requested
  retrieve_ana_diss

  if [ "$lag" = 0 ]; then
    grib_set -s editionNumber=2,scanningMode=0 \
        data/ec_${refdate}${reftime}_ml.0 data/ec_${refdate}${reftime}_surf.0 \
        data/ec_${refdate}${reftime}_const \
        $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib
  else
    grib_set -s editionNumber=2,scanningMode=0,dataDate=$DATE,dataTime=$TIME,stepRange=0 \
        data/ec_${refdate}${reftime}_ml.${lag} data/ec_${refdate}${reftime}_surf.${lag} \
        data/ec_${refdate}${reftime}_const \
        $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+0000.grib
  fi

# multiple forecasts without analysis requested
#   range: timerange relative to IFS reftime
#   step:  timerange relative to Icon reftime (if lag=0, this is equal to range)
# NB: it would be possible to add "z on model level 1" to the output:
#   - take from file data/ec_${refdate}${reftime}_const (grib_cop -w ..)
#   - in task remap_day, the file *.z.* would not be needed anymore
#   - check if this is possibile in retrieve_ic_bc_day_mars (otherwise two versions of 
#     task remap_day would be needed) 
else 
  for range in `seq $(($RETRIEVE_START+$hincbd+$lag)) $hincbd $(($RETRIEVE_STOP+$lag))`; do
    step=$(($range-$lag))

    retrieve_for_diss

    if [ "$lag" = 0 ]; then
      ln -s data/ec_${refdate}${reftime}_ml.${range} \
        $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $range).grib
    else
      grib_set -s editionNumber=2,scanningMode=0,dataDate=$DATE,dataTime=$TIME,stepRange=$step \
        data/ec_${refdate}${reftime}_ml.${range} \
        $RETRIEVE_IC_BC_DIR_COMMON/data/ec_${DATE}${TIME}+$(printf "%%04d" $step).grib
    fi
  done
fi

%include <tail.h>
